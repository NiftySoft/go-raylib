---
GENERATOR:
  PackageName: raylib
  PackageDescription: "Package raylib provides Go bindings for Raylib."
  PackageLicense: "THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS."
  Includes: ["../lib/raylib/src/raylib.h"]
  Options:
    SafeStrings: true
    StructAccessors: true

PARSER:
  IncludePaths:
    - "/Applications/Xcode-11.3.1.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include"
    - "/Applications/Xcode-11.3.1.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/11.0.0/include"
  SourcesPaths: ["lib/raylib/src/raylib.h"]
  Defines:
    C_FOR_GO: 1

TRANSLATOR:
  ConstRules:
    defines: expand
    enum: expand
  PtrTips:
    function:
      - { target: "^GetMonitorName$", self: arr, tips: [sref] }
      - { target: "^GetClipboardText$", self: arr, tips: [sref] }

      - { target: "^LoadFileData$", self: arr, tips: [sref, sref] }
      - { target: "^LoadFileText$", self: arr, tips: [sref] }
      - { target: "^GetExtension$", self: arr, tips: [sref] }
      - { target: "^GetFileName$", self: arr, tips: [sref] }
      - { target: "^GetFileNameWithoutExt$", self: arr, tips: [sref] }
      - { target: "^GetDirectoryPath$", self: arr, tips: [sref] }
      - { target: "^GetPrevDirectoryPath$", self: arr, tips: [sref] }
      - { target: "^GetWorkingDirectory$", self: arr, tips: [sref] }
      - { target: "^GetDirectoryFiles$", self: arr, tips: [sref, sref] }
      - { target: "^GetDroppedFiles$", self: arr, tips: [sref] }

      - { target: "^CompressData$", self: arr, tips: [sref, sref, sref] }
      - { target: "^DecompressData$", self: arr, tips: [sref, sref, sref] }

      - { target: "^GetGamepadName$", self: arr, tips: [sref] }

      - { target: "^TextSubtext$", self: arr, tips: [sref, sref, sref] }
      - { target: "^TextReplace$", self: arr, tips: [sref, sref, sref] }
      - { target: "^TextInsert$", self: arr, tips: [sref, sref, sref] }
      - { target: "^TextJoin$", self: arr, tips: [sref, sref, sref] }
      - { target: "^TextSplit$", self: arr, tips: [sref, sref, sref] }
      - { target: "^TextToUpper$", self: arr, tips: [sref] }
      - { target: "^TextToLower$", self: arr, tips: [sref] }
      - { target: "^TextToPascal$", self: arr, tips: [sref] }
      - { target: "^TextToUtf8$", self: arr, tips: [sref, sref] }

      - { target: "^CodepointToUtf8$", self: arr, tips: [sref, sref] }

      - { target: "^GenImageFontAtlas$", tips: [sref, arr, sref, sref, sref, sref] }

      # Image manipulation functions
      # - { target: "^GetImageData$", self: arr, tips: [sref] }

      - { target: "^LoadModelAnimations$", self: arr, tips: [sref, sref] }

      # defaults
      - { target: ".", tips: [sref, sref, sref, sref, sref, sref, sref, sref, sref] }
  Rules:
    global:
      - { action: accept, from: "." }
      - { transform: export }
    const:
      - { action: accept, from: "." }
      - { action: ignore, from: "(?i)Trace" }
      - { action: ignore, from: "SpriteFont" }
      - { action: ignore, from: __ }
      - { transform: title }
    function:
      - { action: accept, from: "." }
      - { action: replace, from: ^GetColorStructure, to: GetColor }
      - { action: ignore, from: "(?i)Trace" }
      - { action: ignore, from: "^TextFormat$" }
      - { action: ignore, from: __ }
    type:
      - { action: accept, from: "." }
      - { action: ignore, from: "(?i)Trace" }
    private:
      - { transform: unexport }
    post-global:
      - { action: replace, from: _$ }
      - { load: snakecase }
