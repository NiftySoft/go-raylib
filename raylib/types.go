// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Wed, 26 Aug 2020 16:32:13 CST.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package raylib

/*
#include "../lib/raylib/src/raylib.h"
#include "../lib/raylib/src/raymath.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import "unsafe"

// Vector2 as declared in src/raylib.h:176
type Vector2 struct {
	gX             float32
	gY             float32
	ref29ca61a5    *C.Vector2
	allocs29ca61a5 interface{}
}
type vector2 struct {
	X float32
	Y float32
}

// Vector3 as declared in src/raylib.h:183
type Vector3 struct {
	gX             float32
	gY             float32
	gZ             float32
	ref5ecd5133    *C.Vector3
	allocs5ecd5133 interface{}
}
type vector3 struct {
	X float32
	Y float32
	Z float32
}

// Vector4 as declared in src/raylib.h:191
type Vector4 struct {
	gX             float32
	gY             float32
	gZ             float32
	gW             float32
	refc0a9c490    *C.Vector4
	allocsc0a9c490 interface{}
}
type vector4 struct {
	X float32
	Y float32
	Z float32
	W float32
}

// Quaternion as declared in src/raylib.h:194
type Quaternion struct {
	gX             float32
	gY             float32
	gZ             float32
	gW             float32
	refc0a9c490    *C.Vector4
	allocsc0a9c490 interface{}
}
type quaternion struct {
	X float32
	Y float32
	Z float32
	W float32
}

// Matrix as declared in src/raylib.h:202
type Matrix struct {
	gM0            float32
	gM4            float32
	gM8            float32
	gM12           float32
	gM1            float32
	gM5            float32
	gM9            float32
	gM13           float32
	gM2            float32
	gM6            float32
	gM10           float32
	gM14           float32
	gM3            float32
	gM7            float32
	gM11           float32
	gM15           float32
	refff9f44f9    *C.Matrix
	allocsff9f44f9 interface{}
}
type matrix struct {
	M0  float32
	M4  float32
	M8  float32
	M12 float32
	M1  float32
	M5  float32
	M9  float32
	M13 float32
	M2  float32
	M6  float32
	M10 float32
	M14 float32
	M3  float32
	M7  float32
	M11 float32
	M15 float32
}

// Color as declared in src/raylib.h:210
type Color struct {
	gR             byte
	gG             byte
	gB             byte
	gA             byte
	refa79767ed    *C.Color
	allocsa79767ed interface{}
}
type color struct {
	R byte
	G byte
	B byte
	A byte
}

// Rectangle as declared in src/raylib.h:218
type Rectangle struct {
	gX             float32
	gY             float32
	gWidth         float32
	gHeight        float32
	refcee8783a    *C.Rectangle
	allocscee8783a interface{}
}
type rectangle struct {
	X      float32
	Y      float32
	Width  float32
	Height float32
}

// Image as declared in src/raylib.h:228
type Image struct {
	gData         unsafe.Pointer
	gWidth        int32
	gHeight       int32
	gMipmaps      int32
	gFormat       int32
	ref4fc2b5b    *C.Image
	allocs4fc2b5b interface{}
}
type image struct {
	Data    unsafe.Pointer
	Width   int32
	Height  int32
	Mipmaps int32
	Format  int32
}

// Texture2D as declared in src/raylib.h:238
type Texture2D struct {
	gId            uint32
	gWidth         int32
	gHeight        int32
	gMipmaps       int32
	gFormat        int32
	ref3c51a40b    *C.Texture2D
	allocs3c51a40b interface{}
}
type texture2D struct {
	Id      uint32
	Width   int32
	Height  int32
	Mipmaps int32
	Format  int32
}

// Texture as declared in src/raylib.h:241
type Texture struct {
	gId            uint32
	gWidth         int32
	gHeight        int32
	gMipmaps       int32
	gFormat        int32
	ref3c51a40b    *C.Texture2D
	allocs3c51a40b interface{}
}
type texture struct {
	Id      uint32
	Width   int32
	Height  int32
	Mipmaps int32
	Format  int32
}

// TextureCubemap as declared in src/raylib.h:244
type TextureCubemap struct {
	gId            uint32
	gWidth         int32
	gHeight        int32
	gMipmaps       int32
	gFormat        int32
	ref3c51a40b    *C.Texture2D
	allocs3c51a40b interface{}
}
type textureCubemap struct {
	Id      uint32
	Width   int32
	Height  int32
	Mipmaps int32
	Format  int32
}

// RenderTexture2D as declared in src/raylib.h:252
type RenderTexture2D struct {
	gId            uint32
	gTexture       Texture2D
	gDepth         Texture2D
	gDepthTexture  bool
	ref2f94e9e3    *C.RenderTexture2D
	allocs2f94e9e3 interface{}
}
type renderTexture2D struct {
	Id           uint32
	Texture      C.Texture2D
	Depth        C.Texture2D
	DepthTexture bool
}

// RenderTexture as declared in src/raylib.h:255
type RenderTexture struct {
	gId            uint32
	gTexture       Texture2D
	gDepth         Texture2D
	gDepthTexture  bool
	ref2f94e9e3    *C.RenderTexture2D
	allocs2f94e9e3 interface{}
}
type renderTexture struct {
	Id           uint32
	Texture      C.Texture2D
	Depth        C.Texture2D
	DepthTexture bool
}

// NPatchInfo as declared in src/raylib.h:265
type NPatchInfo struct {
	gSourceRec     Rectangle
	gLeft          int32
	gTop           int32
	gRight         int32
	gBottom        int32
	gType          int32
	ref78104a03    *C.NPatchInfo
	allocs78104a03 interface{}
}
type nPatchInfo struct {
	SourceRec C.Rectangle
	Left      int32
	Top       int32
	Right     int32
	Bottom    int32
	Type      int32
}

// CharInfo as declared in src/raylib.h:274
type CharInfo struct {
	gValue         int32
	gOffsetX       int32
	gOffsetY       int32
	gAdvanceX      int32
	gImage         Image
	ref702c36c0    *C.CharInfo
	allocs702c36c0 interface{}
}
type charInfo struct {
	Value    int32
	OffsetX  int32
	OffsetY  int32
	AdvanceX int32
	Image    C.Image
}

// Font as declared in src/raylib.h:283
type Font struct {
	gBaseSize      int32
	gCharsCount    int32
	gTexture       Texture2D
	gRecs          []Rectangle
	gChars         []CharInfo
	ref70a6a7ec    *C.Font
	allocs70a6a7ec interface{}
}
type font struct {
	BaseSize   int32
	CharsCount int32
	Texture    C.Texture2D
	Recs       *C.Rectangle
	Chars      *C.CharInfo
}

// Camera3D as declared in src/raylib.h:294
type Camera3D struct {
	gPosition     Vector3
	gTarget       Vector3
	gUp           Vector3
	gFovy         float32
	gType         int32
	ref7b09036    *C.Camera3D
	allocs7b09036 interface{}
}
type camera3D struct {
	Position C.Vector3
	Target   C.Vector3
	Up       C.Vector3
	Fovy     float32
	Type     int32
}

// Camera as declared in src/raylib.h:296
type Camera struct {
	gPosition     Vector3
	gTarget       Vector3
	gUp           Vector3
	gFovy         float32
	gType         int32
	ref7b09036    *C.Camera3D
	allocs7b09036 interface{}
}
type camera struct {
	Position C.Vector3
	Target   C.Vector3
	Up       C.Vector3
	Fovy     float32
	Type     int32
}

// Camera2D as declared in src/raylib.h:304
type Camera2D struct {
	gOffset        Vector2
	gTarget        Vector2
	gRotation      float32
	gZoom          float32
	ref1eaba177    *C.Camera2D
	allocs1eaba177 interface{}
}
type camera2D struct {
	Offset   C.Vector2
	Target   C.Vector2
	Rotation float32
	Zoom     float32
}

// Mesh as declared in src/raylib.h:330
type Mesh struct {
	gVertexCount   int32
	gTriangleCount int32
	gVertices      []float32
	gTexcoords     []float32
	gTexcoords2    []float32
	gNormals       []float32
	gTangents      []float32
	gColors        []byte
	gIndices       []uint16
	gAnimVertices  []float32
	gAnimNormals   []float32
	gBoneIds       []int32
	gBoneWeights   []float32
	gVaoId         uint32
	gVboId         []uint32
	ref415d9568    *C.Mesh
	allocs415d9568 interface{}
}
type mesh struct {
	VertexCount   int32
	TriangleCount int32
	Vertices      *float32
	Texcoords     *float32
	Texcoords2    *float32
	Normals       *float32
	Tangents      *float32
	Colors        *byte
	Indices       *uint16
	AnimVertices  *float32
	AnimNormals   *float32
	BoneIds       *int32
	BoneWeights   *float32
	VaoId         uint32
	VboId         *uint32
}

// Shader as declared in src/raylib.h:336
type Shader struct {
	gId            uint32
	gLocs          []int32
	reff85f9b1e    *C.Shader
	allocsf85f9b1e interface{}
}
type shader struct {
	Id   uint32
	Locs *int32
}

// MaterialMap as declared in src/raylib.h:343
type MaterialMap struct {
	gTexture       Texture2D
	gColor         Color
	gValue         float32
	refa8350ad3    *C.MaterialMap
	allocsa8350ad3 interface{}
}
type materialMap struct {
	Texture C.Texture2D
	Color   C.Color
	Value   float32
}

// Material as declared in src/raylib.h:350
type Material struct {
	gShader        Shader
	gMaps          []MaterialMap
	gParams        []float32
	ref85c817c3    *C.Material
	allocs85c817c3 interface{}
}
type material struct {
	Shader C.Shader
	Maps   *C.MaterialMap
	Params *float32
}

// Transform as declared in src/raylib.h:357
type Transform struct {
	gTranslation   Vector3
	gRotation      Quaternion
	gScale         Vector3
	reff543030e    *C.Transform
	allocsf543030e interface{}
}
type transform struct {
	Translation C.Vector3
	Rotation    C.Vector4
	Scale       C.Vector3
}

// BoneInfo as declared in src/raylib.h:363
type BoneInfo struct {
	gName          [32]byte
	gParent        int32
	ref5ab7f197    *C.BoneInfo
	allocs5ab7f197 interface{}
}
type boneInfo struct {
	Name   [32]byte
	Parent int32
}

// Model as declared in src/raylib.h:380
type Model struct {
	gTransform     Matrix
	gMeshCount     int32
	gMeshes        []Mesh
	gMaterialCount int32
	gMaterials     []Material
	gMeshMaterial  []int32
	gBoneCount     int32
	gBones         []BoneInfo
	gBindPose      []Transform
	ref16545ddd    *C.Model
	allocs16545ddd interface{}
}
type model struct {
	Transform     C.Matrix
	MeshCount     int32
	Meshes        *C.Mesh
	MaterialCount int32
	Materials     *C.Material
	MeshMaterial  *int32
	BoneCount     int32
	Bones         *C.BoneInfo
	BindPose      *C.Transform
}

// ModelAnimation as declared in src/raylib.h:389
type ModelAnimation struct {
	gBoneCount     int32
	gBones         []BoneInfo
	gFrameCount    int32
	gFramePoses    [][]Transform
	ref26dd6a24    *C.ModelAnimation
	allocs26dd6a24 interface{}
}
type modelAnimation struct {
	BoneCount  int32
	Bones      *C.BoneInfo
	FrameCount int32
	FramePoses **C.Transform
}

// Ray as declared in src/raylib.h:395
type Ray struct {
	gPosition      Vector3
	gDirection     Vector3
	refc546b0b2    *C.Ray
	allocsc546b0b2 interface{}
}
type ray struct {
	Position  C.Vector3
	Direction C.Vector3
}

// RayHitInfo as declared in src/raylib.h:403
type RayHitInfo struct {
	gHit           bool
	gDistance      float32
	gPosition      Vector3
	gNormal        Vector3
	refb8de43a9    *C.RayHitInfo
	allocsb8de43a9 interface{}
}
type rayHitInfo struct {
	Hit      bool
	Distance float32
	Position C.Vector3
	Normal   C.Vector3
}

// BoundingBox as declared in src/raylib.h:409
type BoundingBox struct {
	gMin           Vector3
	gMax           Vector3
	refa54e9d16    *C.BoundingBox
	allocsa54e9d16 interface{}
}
type boundingBox struct {
	Min C.Vector3
	Max C.Vector3
}

// Wave as declared in src/raylib.h:418
type Wave struct {
	gSampleCount   uint32
	gSampleRate    uint32
	gSampleSize    uint32
	gChannels      uint32
	gData          unsafe.Pointer
	ref7a3602b7    *C.Wave
	allocs7a3602b7 interface{}
}
type wave struct {
	SampleCount uint32
	SampleRate  uint32
	SampleSize  uint32
	Channels    uint32
	Data        unsafe.Pointer
}

// AudioStream as declared in src/raylib.h:430
type AudioStream struct {
	gSampleRate    uint32
	gSampleSize    uint32
	gChannels      uint32
	ref997374a2    *C.AudioStream
	allocs997374a2 interface{}
}
type audioStream struct {
	SampleRate uint32
	SampleSize uint32
	Channels   uint32
}

// Sound as declared in src/raylib.h:436
type Sound struct {
	gSampleCount   uint32
	gStream        AudioStream
	ref394fec80    *C.Sound
	allocs394fec80 interface{}
}
type sound struct {
	SampleCount uint32
	Stream      C.AudioStream
}

// Music as declared in src/raylib.h:448
type Music struct {
	gCtxType      int32
	gCtxData      unsafe.Pointer
	gLooping      bool
	gSampleCount  uint32
	gStream       AudioStream
	refc930d4e    *C.Music
	allocsc930d4e interface{}
}
type music struct {
	CtxType     int32
	CtxData     unsafe.Pointer
	Looping     bool
	SampleCount uint32
	Stream      C.AudioStream
}

// VrDeviceInfo as declared in src/raylib.h:462
type VrDeviceInfo struct {
	gHResolution            int32
	gVResolution            int32
	gHScreenSize            float32
	gVScreenSize            float32
	gVScreenCenter          float32
	gEyeToScreenDistance    float32
	gLensSeparationDistance float32
	gInterpupillaryDistance float32
	gLensDistortionValues   [4]float32
	gChromaAbCorrection     [4]float32
	ref6e24e41d             *C.VrDeviceInfo
	allocs6e24e41d          interface{}
}
type vrDeviceInfo struct {
	HResolution            int32
	VResolution            int32
	HScreenSize            float32
	VScreenSize            float32
	VScreenCenter          float32
	EyeToScreenDistance    float32
	LensSeparationDistance float32
	InterpupillaryDistance float32
	LensDistortionValues   [4]float32
	ChromaAbCorrection     [4]float32
}

// Text as declared in src/raylib.h:467
type Text struct {
	gText          []string
	ref9bb908f9    *C.Text
	allocs9bb908f9 interface{}
}
type text struct {
	Text []string
}
